diff --git a/build/src/CustomCursor.qs b/build/src/CustomCursor.qs
new file mode 100644
index 0000000..4a2eefb
--- /dev/null
+++ b/build/src/CustomCursor.qs
@@ -0,0 +1,28 @@
+//latin_cross();
+//painter.drawChar("Kochi Gothic", 12363);
+//painter.drawDistroLogo(120);
+//painter.drawChar("Kochi Gothic", 127801);
+painter.drawChar("", 127801);
+ 
+function latin_cross() 
+{
+	var axis;
+
+	/* Find the horizontal centre of the drawing area. */
+	axis = cursorRect.left() + ((cursorRect.right() - cursorRect.left()) / 2);
+
+	/* Draw a vertial line alone the given axis. */
+	painter.drawLine(axis,
+		cursorRect.top(),
+		axis,
+		cursorRect.bottom());
+
+	/* Find the point 30% from the top. */
+	axis = cursorRect.top() + ((cursorRect.bottom() - cursorRect.top()) / 3);
+
+	/* Draw a horizontal line along the given axis. */
+	painter.drawLine(cursorRect.left(),
+		axis,
+		cursorRect.right(),
+		axis);
+}
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index bde2973..5b71416 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -122,13 +122,15 @@ set(konsoleprivate_SRCS ${sessionadaptors_SRCS}
                         PrintOptions.cpp
                         konsole_wcwidth.cpp
                         WindowSystemInfo.cpp
+			CustomCursorDynamic.cpp
                         ${CMAKE_CURRENT_BINARY_DIR}/org.kde.konsole.Window.xml
                         ${CMAKE_CURRENT_BINARY_DIR}/org.kde.konsole.Session.xml)
 set(konsole_LIBS ${KDE4_KPTY_LIBS}
                  ${KDE4_KIO_LIBS}
                  ${KDE4_KNOTIFYCONFIG_LIBS}
                  ${QT_QTXML_LIBRARY}
-                 ${X11_LIBRARIES})
+                 ${X11_LIBRARIES}
+		 QtScript)
 
 if(HAVE_LIBKONQ)
   set(konsole_LIBS ${konsole_LIBS} ${LIBKONQ_LIBRARY})
diff --git a/src/CustomCursor.h b/src/CustomCursor.h
new file mode 100644
index 0000000..0b4b333
--- /dev/null
+++ b/src/CustomCursor.h
@@ -0,0 +1,114 @@
+#ifndef CUSTOMCURSOR_HPP
+#define CUSTOMCURSOR_HPP
+
+namespace CustomCursor {
+
+	/* Enum for mapping distros to ascii codes for the 
+	 * ConkySymbols font family. */
+	enum distro {
+		tux = 'a',
+		tux_inv = 'A',
+		ubuntu = 'o',
+		ubuntu_inv = 'O',
+		suse = 'p',
+		suse_inv = 'P',
+		redhat = 'q',
+		redhat_inv = 'Q',
+		fedora = 'r',
+		fedora_inv = 'R',
+		debian = 's',
+		debian_inv = 'S',
+		arch = 't',
+		arch_inv = 'T',
+		mint = 'u',
+		mint_inv = 'U',
+		mandriva = 'v',
+		mandriva_inv = 'V',
+		noidea = 'w',
+		noidea_inv = 'W',
+		gentoo = 'x',
+		gentoo_inv = 'X',
+		FreeBSD = 'y',
+		FreeBSD_inv = 'Y',
+		pardus = 'z',
+		pardus_inv = 'Z'
+	};
+
+	void latin_cross(QPainter&, const QRect&);
+	void drawChar(QPainter&, const QRect&, const char*, const QString&);
+	void drawDistroLogo(QPainter&, const QRect&, distro d);
+
+	inline void draw_cursor(QPainter &painter, const QRect &cursorRect) {
+
+		//latin_cross(painter, cursorRect);
+		//drawChar(painter, cursorRect, "Kochi Gothic", QChar(12363));
+		drawDistroLogo(painter, cursorRect, gentoo);
+	}
+
+	inline void latin_cross(QPainter &painter, const QRect &cursorRect) {
+
+		int axis;
+
+		/* Find the horizontal centre of the drawing area. */
+		axis = cursorRect.left() + ((cursorRect.right() - cursorRect.left()) / 2);
+
+		/* Draw a vertial line alone the given axis. */
+		painter.drawLine(axis,
+			cursorRect.top(),
+			axis,
+			cursorRect.bottom());
+
+		/* Find the point 30% from the top. */
+		axis = cursorRect.top() + ((cursorRect.bottom() - cursorRect.top()) / 3);
+
+		/* Draw a horizontal line along the given axis. */
+		painter.drawLine(cursorRect.left(),
+			axis,
+			cursorRect.right(),
+			axis);
+	}
+
+	inline void drawChar(QPainter &painter, const QRect &cursorRect, 
+		const char *family, int &to_paint) {
+
+		drawChar(painter, cursorRect, family, QChar(to_paint));
+	}
+
+	inline void drawChar(QPainter &painter, const QRect &cursorRect, 
+		const char *family, const QString &to_paint) {
+
+		QFont font = painter.font();
+
+		/* Save the original font family. */
+		QString old_family = font.family();
+		bool same_family;
+
+		/* If the new family is different then set it. */
+		if (same_family = (family && family != old_family)) {
+			font.setFamily(family);
+			painter.setFont(font);
+		}
+
+		painter.drawText(cursorRect, Qt::AlignLeft, to_paint);
+
+		/* Restore the original font. */
+		if (!same_family) {
+			font.setFamily(old_family);
+			painter.setFont(font);
+		}
+	}
+
+	inline void drawDistroLogo(QPainter &painter, const QRect &cursorRect, 
+		distro d) {
+
+		drawChar(painter, cursorRect, "ConkySymbols", QString(d));
+	}
+
+	inline void drawDistroLogo(QPainter &painter, const QRect &cursorRect, 
+		int d) {
+
+		drawChar(painter, cursorRect, "ConkySymbols", QString(d));
+	}
+
+}
+#endif
diff --git a/src/CustomCursorDynamic.cpp b/src/CustomCursorDynamic.cpp
new file mode 100644
index 0000000..e19f629
--- /dev/null
+++ b/src/CustomCursorDynamic.cpp
@@ -0,0 +1,58 @@
+#include "CustomCursorDynamic.h"
+#include "CustomCursor.h"
+
+PainterWrapper::PainterWrapper(QPainter &painter, QRect &cursorRect)
+{
+	this->painter = &painter;
+	this->cursorRect = &cursorRect;
+}
+
+void PainterWrapper::say_hello() 
+{
+	std::cout << "Hello from cpp" << std::endl;
+}
+
+void PainterWrapper::drawChar(QString family, QString to_paint) 
+{
+    	CustomCursor::drawChar(*painter, *cursorRect, 
+		family.toUtf8().constData(), to_paint);
+}
+
+void PainterWrapper::drawChar(QString family, int to_paint) 
+{
+    	CustomCursor::drawChar(*painter, *cursorRect, 
+		family.toUtf8().constData(), to_paint);
+}
+
+void PainterWrapper::drawLine(int x1, int y1, int x2, int y2)
+{
+	painter->drawLine(x1, y1, x2, y2);
+}
+
+void PainterWrapper::drawDistroLogo(int distro) 
+{
+	CustomCursor::drawDistroLogo(*painter, *cursorRect, distro);
+}
+
+RectWrapper::RectWrapper(QRect &cursorRect) 
+{
+	this->cursorRect = &cursorRect;
+}
+
+int RectWrapper::top()
+{
+	return cursorRect->top();
+}
+
+int RectWrapper::bottom()
+{
+	return cursorRect->bottom();
+}
+int RectWrapper::left()
+{
+	return cursorRect->left();
+}
+int RectWrapper::right()
+{
+	return cursorRect->right();
+}
diff --git a/src/CustomCursorDynamic.h b/src/CustomCursorDynamic.h
new file mode 100644
index 0000000..9c4616b
--- /dev/null
+++ b/src/CustomCursorDynamic.h
@@ -0,0 +1,42 @@
+#ifndef CUSTOMCURSORDYNAMIC_H
+#define CUSTOMCURSORDYNAMIC_H
+#include <QObject>
+#include <QPainter>
+#include <QRect>
+#include <iostream>
+
+class PainterWrapper : public QObject {
+
+	Q_OBJECT
+
+	QPainter *painter;
+	QRect *cursorRect;
+
+	public:
+		PainterWrapper(QPainter &painter, QRect &cursorRect);
+
+	public slots:
+		void drawLine(int x1, int y1, int x2, int y2);
+		void drawChar(QString family, QString to_paint);
+		void drawChar(QString family, int to_paint);
+		void drawDistroLogo(int distro);
+		void say_hello();
+};
+
+class RectWrapper : public QObject {
+
+	Q_OBJECT
+
+	QRect *cursorRect;
+
+	public:
+		RectWrapper(QRect &);
+
+	public slots:
+		int top();
+		int bottom();
+		int left();
+		int right();
+
+};
+#endif
diff --git a/src/EditProfileDialog.ui b/src/EditProfileDialog.ui
index 82298cf..92ea9cc 100644
--- a/src/EditProfileDialog.ui
+++ b/src/EditProfileDialog.ui
@@ -1109,6 +1109,16 @@
                 <string comment="The shape of the cursor">Underline</string>
                </property>
               </item>
+              <item>
+               <property name="text">
+                <string comment="The shape of the cursor">Custom Dynamic</string>
+               </property>
+              </item>
+              <item>
+               <property name="text">
+                <string comment="The shape of the cursor">Custom Static</string>
+               </property>
+              </item>
              </widget>
             </item>
             <item>
diff --git a/src/Enumeration.h b/src/Enumeration.h
index a9fab40..a39083f 100644
--- a/src/Enumeration.h
+++ b/src/Enumeration.h
@@ -85,7 +85,9 @@ public:
          */
         IBeamCursor     = 1,
         /** Draw a line underneath the cursor's position. */
-        UnderlineCursor = 2
+        UnderlineCursor = 2,
+        CustomCursorDynamic = 3,
+        CustomCursorStatic = 4
     };
 
     /** This enum describes the behavior of triple click action . */
diff --git a/src/TerminalDisplay.cpp b/src/TerminalDisplay.cpp
index 2235047..1e93791 100644
--- a/src/TerminalDisplay.cpp
+++ b/src/TerminalDisplay.cpp
@@ -72,6 +72,14 @@
 #include "SessionManager.h"
 #include "Session.h"
 
+// Custom cursor painting.
+#include <QtScript/QScriptEngine>
+#include <QtScript/QScriptValue>
+#include <QFile>
+
+#include "CustomCursor.h"
+#include "CustomCursorDynamic.h"
+
 using namespace Konsole;
 
 #ifndef loc
@@ -642,7 +650,7 @@ void TerminalDisplay::drawCursor(QPainter& painter,
     if (_cursorBlinking)
         return;
 
-    QRect cursorRect = rect;
+    QRect cursorRect = rect; 
     cursorRect.setHeight(_fontHeight - _lineSpacing - 1);
 
     QColor cursorColor = _cursorColor.isValid() ? _cursorColor : foregroundColor;
@@ -678,6 +686,31 @@ void TerminalDisplay::drawCursor(QPainter& painter,
                          cursorRect.top(),
                          cursorRect.left(),
                          cursorRect.bottom());
+
+    } else if (_cursorShape == Enum::CustomCursorDynamic) {
+
+	QScriptEngine engine;
+
+	PainterWrapper wrapper(painter, cursorRect);
+	RectWrapper r_wrapper(cursorRect);
+
+	QScriptValue js_painter = engine.newQObject(&wrapper);
+        engine.globalObject().setProperty("painter", js_painter);
+
+	QScriptValue js_rect = engine.newQObject(&r_wrapper);
+        engine.globalObject().setProperty("cursorRect", js_rect);
+
+	QString script_file_name("CustomCursor.qs");
+	QFile script_file(script_file_name);
+	script_file.open(QIODevice::ReadOnly);
+	engine.evaluate(script_file.readAll(), script_file_name);
+	script_file.close();
+
+    } else if (_cursorShape == Enum::CustomCursorStatic) {
+
+	/* This is defined in CustomCursor.h */
+    	CustomCursor::draw_cursor(painter, cursorRect);
+    
     }
 }
 
diff --git a/src/ViewManager.cpp b/src/ViewManager.cpp
index 0b43bb8..590cdf9 100644
--- a/src/ViewManager.cpp
+++ b/src/ViewManager.cpp
@@ -858,6 +858,10 @@ void ViewManager::applyProfileToView(TerminalDisplay* view , const Profile::Ptr
         view->setKeyboardCursorShape(Enum::IBeamCursor);
     else if (cursorShape == Enum::UnderlineCursor)
         view->setKeyboardCursorShape(Enum::UnderlineCursor);
+    else if (cursorShape == Enum::CustomCursorDynamic)
+        view->setKeyboardCursorShape(Enum::CustomCursorDynamic);
+    else if (cursorShape == Enum::CustomCursorStatic)
+        view->setKeyboardCursorShape(Enum::CustomCursorStatic);
 
     // cursor color
     if (profile->useCustomCursorColor()) {
